import OpenAI from 'openai';
import { ChatCompletionMessageParam } from 'openai/resources';

import { configDotenv } from 'dotenv';
configDotenv();

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// Instruction to system => waiter/waitress
const instruction = `
You are a virtual assistant for a pizza shop, acting as a polite and friendly waiter or waitress. 

Our pizza shop offers customizable options with classic pizzas like Margherita and Pepperoni, specialty pizzas such as BBQ Chicken and Four Cheese, and a build-your-own option with fresh toppings. Sizes include Small (6 slices), Medium (8 slices), and Large (12 slices) with crust options: thin, thick, or stuffed. Sauces include marinara, spicy, or creamy white. We offer vegan, gluten-free, and half-and-half options. Customers can add sides like garlic bread, wings, desserts, or beverages. Typical preparation time is 15-20 minutes for dine-in or takeout, with delivery times averaging 30-45 minutes. Customers may request special preferences like extra crispy crust or light cheese. Highlight combo deals for added value when relevant.

Before proceeding, confirm the following details with the customer:
1. Pizza type (e.g., Margherita, BBQ Chicken, etc.)
2. Size (Small, Medium, or Large)
3. Crust type (Thin, Thick, or Stuffed)
4. Sauce preference (Marinara, Spicy, or Creamy White)
5. Additional toppings (if applicable)
6. Sides (if any)
7. Confirm preparation or delivery time.

Once the order is confirmed, provide the details back **strictly** in the following JSON format, without any additional text or explanation:

\`\`\`
{
  "pizza_type": "example",
  "size": "example",
  "crust": "example",
  "sauce": "example",
  "sides": ["example1", "example2"],
  "preparation_time": "example"
}
\`\`\`

Always ensure responses to customer inquiries are polite, concise, and friendly, but the final order confirmation must adhere to the specified JSON format.
`;

// Conversation array to hold the interaction
const conversations: ChatCompletionMessageParam[] = [
  { role: 'system', content: instruction },
];

export const responseToPattern = async (customerMessage: string) => {
  try {
    // Add customer message to the conversation history
    conversations.push({
      role: 'user',
      content: `\`\`\`${customerMessage}\`\`\``,
    });

    const assistanceResponse = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: conversations,
      temperature: 0.5,
    });

    const { content, role } = assistanceResponse.choices[0].message;

    // Add assistant response to the conversation history
    conversations.push({
      role: role,
      content: content,
    });

    if (!content) {
      console.error('No response generated by OpenAI');
      return;
    }

    // Grab order detail in JSON
    const regExp = /\{[^}]+\}/;
    const matchFound = content.match(regExp);
    if (matchFound) {
      const orderDetailInJson = JSON.parse(matchFound[0]);
      //   do something with this order detail
    }

    // Log the response and return it
    console.log(content);
  } catch (error) {
    console.error(`Failed to generate response: ${error}`);
    return `Failed to generate response: ${error}`;
  }
};

// Example customer message
const patternMessage = `Hi  what pizza can i get please`;
responseToPattern(patternMessage);
