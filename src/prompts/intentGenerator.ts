import OpenAI from 'openai';
import { configDotenv } from 'dotenv';
configDotenv();

const oi = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

export const identifyCustomerIntent = async (customerMessage: string) => {
  const prompt = ` 
  You will process customer messages enclosed within triple backticks. Identify one of these intents: 
- checkStatus: Find status of a job (keys: email, name, phone, job_id). 
- requestSupport: Request help with a problem (key: problem description). 
- createAccount: Create a new account (keys: name, email, phone). 
- TalkToManager: Request to speak to a manager (keys: customer name, email, manager name). 
- UpdateStatus: Provide new details about a reported job (keys: email, phone, job_id).

Respond as JSON: {"intentName": "intentName", "data": {key-value pairs}}. 
If intent is unclear, respond: {"intentName": "unclear", "data": {}}.
Example:
Customer: "I need help with job #12345."
Response: {"intentName": "requestSupport", "data": {"problem_description": "help with job #12345"}}


`;

  try {
    const response = await oi.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        { role: 'system', content: prompt },
        { role: 'user', content: `\`\`\`${customerMessage}\`\`\`` },
      ],
    });

    const data = response.choices[0].message.content;
    if (!data) {
      console.log({ error: 'No text generated by openai' });
      return;
    }
    const processedText = JSON.parse(data);
    console.log(processedText);
  } catch (error) {
    console.log({ error: `Failed to generate text by openai, ${error}` });
    return { error: `Failed to generate text by openai, ${error}` };
  }
};

// customer order
const customerMessage = 'I need help with job #12345.';
const text = '';

identifyCustomerIntent(customerMessage);
